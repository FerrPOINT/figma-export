#!/usr/bin/env bun

/**
 * –°–ö–†–ò–ü–¢ –†–£–ß–ù–û–ô –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –≠–ö–°–ü–û–†–¢–ê
 * 
 * –ó–∞–ø—É—Å–∫: bun run scripts/reorganize-export.ts
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ß–∏—Ç–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É export/
 * - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —Å–ª–æ—è–º
 * - –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É export/reorganized/
 * - –ù–ï —É–¥–∞–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * - –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */

import { FigmaBatchReorganizer } from '../src/utils/reorganizer';

async function main() {
  console.log(`üöÄ –ó–ê–ü–£–°–ö –†–£–ß–ù–û–ô –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –≠–ö–°–ü–û–†–¢–ê`);
  console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toISOString()}`);
  console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞–ø–∫—É export/...`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ export
    const { existsSync } = await import('fs');
    const { join } = await import('path');
    
    const exportPath = join('./export');
    if (!existsSync(exportPath)) {
      console.error(`‚ùå –ü–∞–ø–∫–∞ export/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`);
      console.error(`üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç: bun run start`);
      process.exit(1);
    }
    
    console.log(`‚úÖ –ü–∞–ø–∫–∞ export/ –Ω–∞–π–¥–µ–Ω–∞`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...`);
    const reorganizer = new FigmaBatchReorganizer();
    const result = await reorganizer.reorganize();
    
    if (result.success) {
      console.log(`\n‚úÖ –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!`);
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   - –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–æ–¥—ã: ${result.statistics.originalNodes}`);
      console.log(`   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã: ${result.statistics.savedNodes}`);
      console.log(`   - –ü–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö: ${result.statistics.dataLoss}`);
      console.log(`   - –°–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫: ${result.statistics.createdFolders}`);
      console.log(`   - –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.statistics.createdFiles}`);
      console.log(`   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(result.statistics.totalSize / 1024)} KB`);
      console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${result.statistics.executionTime}ms`);
      
      if (result.warnings.length > 0) {
        console.log(`\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:`);
        result.warnings.forEach(warning => console.log(`   - ${warning}`));
      }
      
      console.log(`\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: export/reorganized/`);
      console.log(`üí° –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤: export/`);
      
    } else {
      console.error(`\n‚ùå –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!`);
      console.error(`üìã –û—à–∏–±–∫–∏:`);
      result.errors.forEach(error => console.error(`   - ${error}`));
      process.exit(1);
    }
    
  } catch (error) {
    console.error(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`);
    console.error(error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(error => {
  console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:`, error);
  process.exit(1);
}); 