import { writeFileSync, existsSync, mkdirSync, readFileSync, readdirSync, statSync } from 'fs';
import { join } from 'path';

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∏—Å–∫.
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å, –æ–±—ä–µ–∫—Ç—ã/–º–∞—Å—Å–∏–≤—ã ‚Äî –∫–∞–∫ JSON, null ‚Äî –∫–∞–∫ 'null'.
 * @param dataType string ‚Äî –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ –≤ export/
 * @param rawData any ‚Äî –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @param fileName string ‚Äî –∏–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é timestamp.json)
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveRawDataImmediately(dataType: string, rawData: any, fileName?: string): string {
  const dir = join('./export', dataType);
  if (!existsSync(dir)) mkdirSync(dir, { recursive: true });
  const filePath = fileName
    ? join(dir, fileName)
    : join(dir, `${Date.now()}.json`);
  if (typeof rawData === 'string') {
    writeFileSync(filePath, rawData);
  } else if (rawData === null) {
    writeFileSync(filePath, 'null');
  } else {
    writeFileSync(filePath, JSON.stringify(rawData, null, 2));
  }
  console.log(`üíæ [RAW] Saved ${dataType} (type: ${Array.isArray(rawData) ? 'array' : typeof rawData}) to ${filePath}`);
  return filePath;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–≤—å—é.
 * @param dataType string ‚Äî –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥ –≤ export/
 * @param data any ‚Äî –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @param fileName string ‚Äî –∏–º—è —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é timestamp.json)
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveDataImmediately(dataType: string, data: any, fileName?: string): string {
  const dir = join('./export', dataType);
  if (!existsSync(dir)) mkdirSync(dir, { recursive: true });
  const filePath = fileName
    ? join(dir, fileName)
    : join(dir, `${Date.now()}.json`);
  
  const jsonData = JSON.stringify(data, null, 2);
  writeFileSync(filePath, jsonData);
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é
  const preview = jsonData.length > 100 
    ? jsonData.substring(0, 100) + '...'
    : jsonData;
  console.log(`üíæ Saved ${dataType} data`);
  console.log(`üìÅ Saved to: ${filePath}`);
  console.log(`üìä File size: ${(jsonData.length / 1024).toFixed(2)} KB`);
  console.log(`üîç Preview: ${preview}`);
  
  return filePath;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –ø–æ ID.
 * –û—á–∏—â–∞–µ—Ç ID –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
 * @param dataType string ‚Äî —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
 * @param data any ‚Äî –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @param id string ‚Äî ID –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveDataById(dataType: string, data: any, id: string): string {
  // –û—á–∏—â–∞–µ–º ID –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanId = id.replace(/[<>:"/\\|?*]/g, '_');
  const fileName = `${dataType}_${cleanId}.json`;
  return saveDataImmediately(dataType, data, fileName);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ batch –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π.
 * @param data any ‚Äî batch –¥–∞–Ω–Ω—ã–µ
 * @param messageId string ‚Äî ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveBatchData(data: any, messageId: string): string {
  const fileName = `batch_${messageId}.json`;
  return saveDataImmediately('batches', data, fileName);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–æ–¥.
 * @param data any ‚Äî –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param nodeId string ‚Äî ID –Ω–æ–¥—ã
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveNodeImage(data: any, nodeId: string): string {
  const cleanNodeId = nodeId.replace(/[<>:"/\\|?*]/g, '_');
  const fileName = `image_${cleanNodeId}.json`;
  return saveDataImmediately('images', data, fileName);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –Ω–æ–¥.
 * @param data any ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
 * @param commandId string ‚Äî ID –∫–æ–º–∞–Ω–¥—ã
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveAllNodesExport(data: any, commandId: string): string {
  const fileName = `all_nodes_export_${commandId}.json`;
  return saveDataImmediately('all_nodes_export', data, fileName);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 * @param data any ‚Äî –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param messageId string ‚Äî ID —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveIncomingMessageLog(data: any, messageId: string): string {
  const fileName = `incoming_message_${messageId}.json`;
  return saveDataImmediately('logs', data, fileName);
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞.
 * @param statistics any ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveExportStatistics(statistics: any): string {
  return saveDataImmediately('metadata', statistics, 'export_statistics.json');
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
 * @param report any ‚Äî –æ—Ç—á–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns string ‚Äî –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
 */
export function saveValidationReport(report: any): string {
  return saveDataImmediately('metadata', report, 'validation_report.json');
}

/**
 * –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
 * @param filePath string ‚Äî –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns any ‚Äî —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export function readFileSafe(filePath: string): any {
  try {
    if (!existsSync(filePath)) {
      console.log(`‚ö†Ô∏è File not found: ${filePath}`);
      return null;
    }
    const content = readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`‚ùå Error reading file ${filePath}:`, error);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö.
 * @param filePath string ‚Äî –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns number ‚Äî —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö –∏–ª–∏ 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export function getFileSize(filePath: string): number {
  try {
    if (!existsSync(filePath)) return 0;
    const stats = statSync(filePath);
    return stats.size;
  } catch (error) {
    console.error(`‚ùå Error getting file size for ${filePath}:`, error);
    return 0;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
 * @param dirPath string ‚Äî –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
export function ensureDirectoryExists(dirPath: string): void {
  if (!existsSync(dirPath)) {
    mkdirSync(dirPath, { recursive: true });
    console.log(`üìÅ Created directory: ${dirPath}`);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
 * @param dirPath string ‚Äî –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @param extension string ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns string[] ‚Äî —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
 */
export function getFilesInDirectory(dirPath: string, extension?: string): string[] {
  try {
    if (!existsSync(dirPath)) return [];
    const files = readdirSync(dirPath);
    if (extension) {
      return files.filter(file => file.endsWith(extension));
    }
    return files;
  } catch (error) {
    console.error(`‚ùå Error reading directory ${dirPath}:`, error);
    return [];
  }
} 