/**
 * –£–¢–ò–õ–ò–¢–ê –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í–´–°–û–ö–û–ì–û –ö–ê–ß–ï–°–¢–í–ê
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Figma —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
 */

import ImageExportConfig from '../config/image-export-config.js';

class HighQualityImageExporter {
  constructor() {
    this.config = ImageExportConfig;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
   * @param {string} params.nodeId - ID –Ω–æ–¥—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
   * @param {string} params.useCase - –¢–∏–ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (web, print, mobile, etc.)
   * @param {string} params.size - –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (small, medium, large, extraLarge)
   * @param {number} params.customScale - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–∞—Å—à—Ç–∞–± (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param {string} params.format - –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG, JPG, SVG, PDF)
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async exportWithOptimalQuality(params) {
    const {
      nodeId,
      useCase = 'web',
      size = 'medium',
      customScale = null,
      format = null
    } = params;

    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const optimalSettings = this.config.getOptimalSettings(useCase, size);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    const finalSettings = {
      ...optimalSettings,
      ...(customScale && { scale: customScale }),
      ...(format && { format: format })
    };

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const validatedSettings = this.config.validateSettings(finalSettings);

    console.log(`üñºÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞:`);
    console.log(`   üìè –ú–∞—Å—à—Ç–∞–±: ${validatedSettings.scale}x`);
    console.log(`   üìÑ –§–æ—Ä–º–∞—Ç: ${validatedSettings.format}`);
    console.log(`   üéØ –¢–∏–ø: ${validatedSettings.constraint}`);
    console.log(`   üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${useCase}`);
    console.log(`   üìê –†–∞–∑–º–µ—Ä: ${size}`);

    return this.exportImage(nodeId, validatedSettings);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–ª—è –ø–µ—á–∞—Ç–∏
   * @param {string} nodeId - ID –Ω–æ–¥—ã
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async exportForPrint(nodeId) {
    const printSettings = this.config.getPreset('print');
    console.log(`üñ®Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º (${printSettings.scale}x)`);
    return this.exportImage(nodeId, printSettings);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±-–¥–∏–∑–∞–π–Ω–∞
   * @param {string} nodeId - ID –Ω–æ–¥—ã
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async exportForWeb(nodeId) {
    const webSettings = this.config.getPreset('web');
    console.log(`üåê –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–µ–±-–¥–∏–∑–∞–π–Ω–∞ (${webSettings.scale}x)`);
    return this.exportImage(nodeId, webSettings);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
   * @param {string} nodeId - ID –Ω–æ–¥—ã
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async exportForMobile(nodeId) {
    const mobileSettings = this.config.getPreset('mobile');
    console.log(`üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (${mobileSettings.scale}x)`);
    return this.exportImage(nodeId, mobileSettings);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∫–æ–Ω–æ–∫
   * @param {string} nodeId - ID –Ω–æ–¥—ã
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async exportForIcons(nodeId) {
    const iconSettings = this.config.getPreset('icons');
    console.log(`üé® –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–∫–æ–Ω–æ–∫ (${iconSettings.scale}x)`);
    return this.exportImage(nodeId, iconSettings);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π
   * @param {string} nodeId - ID –Ω–æ–¥—ã
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async exportForIllustrations(nodeId) {
    const illustrationSettings = this.config.getPreset('illustrations');
    console.log(`üé≠ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–π (${illustrationSettings.scale}x)`);
    return this.exportImage(nodeId, illustrationSettings);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} nodeId - ID –Ω–æ–¥—ã
   * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async exportImage(nodeId, settings) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–¥—É –∏–∑ Figma
      const node = await figma.getNodeByIdAsync(nodeId);
      if (!node) {
        throw new Error(`Node not found with ID: ${nodeId}`);
      }

      if (!("exportAsync" in node)) {
        throw new Error(`Node does not support exporting: ${nodeId}`);
      }

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
      const exportSettings = {
        format: settings.format,
        constraint: { 
          type: settings.constraint, 
          value: settings.scale 
        }
      };

      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const bytes = await node.exportAsync(exportSettings);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
      const mimeType = this.getMimeType(settings.format);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const base64 = this.customBase64Encode(bytes);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      return {
        success: true,
        nodeId,
        format: settings.format,
        scale: settings.scale,
        constraint: settings.constraint,
        mimeType,
        imageData: base64,
        imageSize: bytes.length,
        quality: {
          scale: settings.scale,
          format: settings.format,
          constraint: settings.constraint,
          description: this.getQualityDescription(settings)
        },
        metadata: {
          exportedAt: new Date().toISOString(),
          nodeName: node.name,
          nodeType: node.type,
          originalSize: node.absoluteBoundingBox ? {
            width: node.absoluteBoundingBox.width,
            height: node.absoluteBoundingBox.height
          } : null
        }
      };

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
      return {
        success: false,
        error: error.message,
        nodeId
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç MIME —Ç–∏–ø –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
   * @param {string} format - –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {string} MIME —Ç–∏–ø
   */
  getMimeType(format) {
    const mimeTypes = {
      'PNG': 'image/png',
      'JPG': 'image/jpeg',
      'JPEG': 'image/jpeg',
      'SVG': 'image/svg+xml',
      'PDF': 'application/pdf'
    };
    return mimeTypes[format] || 'application/octet-stream';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
   * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {string} –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  getQualityDescription(settings) {
    const { scale, format } = settings;
    
    if (scale >= 6) return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–¥–ª—è –ø–µ—á–∞—Ç–∏)';
    if (scale >= 4) return '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–¥–ª—è –≤–µ–±)';
    if (scale >= 2) return '–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞)';
    return '–ë–∞–∑–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ';
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Uint8Array –≤ base64
   * @param {Uint8Array} bytes - –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @returns {string} Base64 —Å—Ç—Ä–æ–∫–∞
   */
  customBase64Encode(bytes) {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    let base64 = "";

    const byteLength = bytes.byteLength;
    const byteRemainder = byteLength % 3;
    const mainLength = byteLength - byteRemainder;

    let a, b, c, d;
    let chunk;

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞–π—Ç—ã –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 3
    for (let i = 0; i < mainLength; i = i + 3) {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∏ –±–∞–π—Ç–∞ –≤ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
      chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è 6-–±–∏—Ç–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ç—Ä–∏–ø–ª–µ—Ç–∞
      a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
      b = (chunk & 258048) >> 12;   // 258048 = (2^6 - 1) << 12
      c = (chunk & 4032) >> 6;      // 4032 = (2^6 - 1) << 6
      d = chunk & 63;                // 63 = 2^6 - 1

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é ASCII –∫–æ–¥–∏—Ä–æ–≤–∫—É
      base64 += chars[a] + chars[b] + chars[c] + chars[d];
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–π—Ç—ã –∏ –ø–∞–¥–¥–∏–Ω–≥
    if (byteRemainder === 1) {
      chunk = bytes[mainLength];

      a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 4 –Ω–∞–∏–º–µ–Ω–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö –±–∏—Ç–∞ –≤ –Ω–æ–ª—å
      b = (chunk & 3) << 4; // 3 = 2^2 - 1

      base64 += chars[a] + chars[b] + "==";
    } else if (byteRemainder === 2) {
      chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];

      a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
      b = (chunk & 1008) >> 4;   // 1008 = (2^6 - 1) << 4

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 2 –Ω–∞–∏–º–µ–Ω–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö –±–∏—Ç–∞ –≤ –Ω–æ–ª—å
      c = (chunk & 15) << 2; // 15 = 2^4 - 1

      base64 += chars[a] + chars[b] + chars[c] + "=";
    }

    return base64;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–∞—Ö
   * @returns {Object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ—Å–µ—Ç–∞—Ö
   */
  getPresetsInfo() {
    return {
      presets: this.config.presets,
      formats: this.config.formats,
      constraints: this.config.constraints,
      sizeRecommendations: this.config.sizeRecommendations
    };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
   * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validateExportSettings(settings) {
    const validated = this.config.validateSettings(settings);
    const formatInfo = this.config.getFormatSettings(settings.format);
    
    return {
      isValid: true,
      settings: validated,
      formatInfo,
      recommendations: this.getRecommendations(settings)
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
   * @param {Object} settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Array} –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  getRecommendations(settings) {
    const recommendations = [];
    const { scale, format } = settings;
    const formatInfo = this.config.getFormatSettings(format);

    if (scale > formatInfo.maxScale) {
      recommendations.push(`–ú–∞—Å—à—Ç–∞–± ${scale} —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ ${format}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${formatInfo.maxScale}x`);
    }

    if (scale < 2 && format === 'PNG') {
      recommendations.push('–î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ PNG —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–± 2x –∏–ª–∏ –≤—ã—à–µ');
    }

    if (format === 'JPG' && scale > 3) {
      recommendations.push('–î–ª—è JPG —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–± –Ω–µ –±–æ–ª–µ–µ 3x –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞');
    }

    return recommendations;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = HighQualityImageExporter;
} else if (typeof window !== 'undefined') {
  window.HighQualityImageExporter = HighQualityImageExporter;
}

export default HighQualityImageExporter; 