import { writeFileSync, mkdirSync, existsSync, unlinkSync } from 'fs';
import { join } from 'path';

interface ImageData {
  nodeId: string;
  format: string;
  scale: number;
  mimeType: string;
  imageData: string;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ —Å base64 –¥–∞–Ω–Ω—ã–º–∏
 */
export function extractImagesFromJsonFiles() {
  console.log('üñºÔ∏è –ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON —Ñ–∞–π–ª–æ–≤...');
  
  const imagesDir = join(process.cwd(), 'export', 'images');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ images —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!existsSync(imagesDir)) {
    console.log(`üìÅ –ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${imagesDir}`);
    return {
      success: false,
      error: '–ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      extractedCount: 0,
      outputDir: imagesDir
    };
  }
  
  try {
    // –ß–∏—Ç–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ images
    const fs = require('fs');
    const files = fs.readdirSync(imagesDir).filter((file: string) => file.endsWith('.json'));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${files.length} JSON —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
    
    let extractedCount = 0;
    
    for (const file of files) {
      const filePath = join(imagesDir, file);
      const content = fs.readFileSync(filePath, 'utf8');
      
      try {
        const imageData: ImageData = JSON.parse(content);
        
        if (imageData.imageData && imageData.nodeId) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ mimeType
          const extension = imageData.mimeType.split('/')[1] || 'png';
          const fileName = `image_${imageData.nodeId.replace(/:/g, '_')}.${extension}`;
          const outputPath = join(imagesDir, fileName);
          
          // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const binaryData = Buffer.from(imageData.imageData, 'base64');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É images
          writeFileSync(outputPath, binaryData);
          
          // –£–¥–∞–ª—è–µ–º JSON —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è PNG
          unlinkSync(filePath);
          
          console.log(`üíæ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fileName} (${binaryData.length} –±–∞–π—Ç) - JSON —É–¥–∞–ª–µ–Ω`);
          extractedCount++;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file}:`, error.message);
      }
    }
    
    console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ò–∑–≤–ª–µ—á–µ–Ω–æ ${extractedCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    console.log(`üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${imagesDir}`);
    
    return {
      success: true,
      extractedCount,
      outputDir: imagesDir
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
 */
export function extractImageFromFile(filePath: string, outputDir?: string) {
  try {
    const fs = require('fs');
    const content = fs.readFileSync(filePath, 'utf8');
    const imageData: ImageData = JSON.parse(content);
    
    if (!imageData.imageData || !imageData.nodeId) {
      throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
    
    const extension = imageData.mimeType.split('/')[1] || 'png';
    const fileName = `image_${imageData.nodeId.replace(/:/g, '_')}.${extension}`;
    const outputPath = outputDir ? join(outputDir, fileName) : fileName;
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const binaryData = Buffer.from(imageData.imageData, 'base64');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (outputDir && !existsSync(outputDir)) {
      mkdirSync(outputDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    writeFileSync(outputPath, binaryData);
    
    console.log(`üíæ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fileName} (${binaryData.length} –±–∞–π—Ç)`);
    
    return {
      success: true,
      fileName,
      fileSize: binaryData.length,
      outputPath
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return {
      success: false,
      error: error.message
    };
  }
} 