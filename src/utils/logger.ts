import { writeFileSync, appendFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';

/**
 * –£–¢–ò–õ–ò–¢–ê –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –ë–û–õ–¨–®–ò–• –î–ê–ù–ù–´–•
 * 
 * –ü–†–ê–í–ò–õ–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
 * 1. –í–°–ï –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫
 * 2. –í –ª–æ–≥ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
 * 3. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–∏–µ
 * 4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
 */

export interface LogData {
  message: string;
  data?: any;
  dataType?: string;
  filePath?: string;
  maxPreviewLength?: number;
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∏—Å–∫
 * @param logData - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function safeLog(logData: LogData): void {
  const {
    message,
    data,
    dataType = 'unknown',
    filePath,
    maxPreviewLength = 100
  } = logData;

  try {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (data !== undefined) {
      let targetPath = filePath;
      
      // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å ID
      if (!targetPath) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
        let fileId = 'unknown';
        if (data.id) {
          fileId = data.id;
        } else if (data.nodeId) {
          fileId = data.nodeId;
        } else if (data.messageId) {
          fileId = data.messageId;
        } else {
          fileId = Date.now().toString();
        }
        
        // –û—á–∏—â–∞–µ–º ID –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        fileId = fileId.replace(/[<>:"/\\|?*]/g, '_');
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const logsDir = join('./export', 'logs');
        if (!existsSync(logsDir)) {
          mkdirSync(logsDir, { recursive: true });
        }
        
        targetPath = join(logsDir, `${dataType}_${fileId}.json`);
      }

      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
      writeFileSync(targetPath, JSON.stringify(data, null, 2));
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const fs = require('fs');
      const fileSize = (fs.statSync(targetPath).size / 1024).toFixed(2);
      
      // –í –ª–æ–≥ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
      const dataString = JSON.stringify(data);
      const preview = dataString.length > maxPreviewLength 
        ? dataString.substring(0, maxPreviewLength) + '...'
        : dataString;
      
      console.log(`üíæ ${message}`);
      console.log(`üìÅ Saved to: ${targetPath}`);
      console.log(`üìä File size: ${fileSize} KB`);
      console.log(`üîç Preview: ${preview}`);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥-—Ñ–∞–π–ª
      const logMessage = `[${new Date().toISOString()}] ${message} | File: ${targetPath} | Size: ${fileSize} KB | Preview: ${preview}\n`;
      appendFileSync(join('./export', 'export_log.txt'), logMessage);
      
    } else {
      // –û–±—ã—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
      console.log(message);
      const logMessage = `[${new Date().toISOString()}] ${message}\n`;
      appendFileSync(join('./export', 'export_log.txt'), logMessage);
    }
    
  } catch (error) {
    console.error(`‚ùå Error in safeLog:`, error);
    console.log(message); // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
 * @param message - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param data - –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export function logIncomingMessage(message: string, data?: any): void {
  if (data) {
    const dataString = JSON.stringify(data);
    const preview = dataString.length > 100 ? dataString.substring(0, 100) + '...' : dataString;
    
    console.log(`üì• ${message}`);
    console.log(`üîç Preview: ${preview}`);
    
    const logMessage = `[${new Date().toISOString()}] üì• ${message} | Preview: ${preview}\n`;
    appendFileSync(join('./export', 'export_log.txt'), logMessage);
  } else {
    console.log(`üì• ${message}`);
    const logMessage = `[${new Date().toISOString()}] üì• ${message}\n`;
    appendFileSync(join('./export', 'export_log.txt'), logMessage);
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–∞–Ω–¥
 * @param message - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param commandData - –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export function logOutgoingCommand(message: string, commandData?: any): void {
  if (commandData) {
    const dataString = JSON.stringify(commandData);
    const preview = dataString.length > 100 ? dataString.substring(0, 100) + '...' : dataString;
    
    console.log(`üì§ ${message}`);
    console.log(`üîç Preview: ${preview}`);
    
    const logMessage = `[${new Date().toISOString()}] üì§ ${message} | Preview: ${preview}\n`;
    appendFileSync(join('./export', 'export_log.txt'), logMessage);
  } else {
    console.log(`üì§ ${message}`);
    const logMessage = `[${new Date().toISOString()}] üì§ ${message}\n`;
    appendFileSync(join('./export', 'export_log.txt'), logMessage);
  }
} 