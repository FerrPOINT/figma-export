/**
 * –ú–û–î–£–õ–¨ –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –ë–ê–¢–ß–ï–ô FIGMA
 * 
 * –¶–µ–ª—å: –†–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ñ–∞–π–ª–æ–≤
 * –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–∞ –≤ React.
 * 
 * –ö–†–ò–¢–ò–ß–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
 * - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ—Ç–µ—Ä—å
 * - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ nodes/, styles/, components/
 * - –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ —Å–ª–æ—è–º
 * - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
 * - –ò–∑–≤–ª–µ—á—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã
 * - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { writeFileSync, readFileSync, existsSync, mkdirSync, readdirSync, statSync } from 'fs';
import { join } from 'path';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface FigmaNode {
  id: string;
  name: string;
  type: string;
  parentId?: string;
  absoluteBoundingBox?: any;
  fills?: any[];
  strokes?: any[];
  characters?: string;
  style?: any;
  cornerRadius?: number;
  children?: number;
}

interface LayerData {
  metadata: {
    id: string;
    name: string;
    type: string;
    dimensions: { width: number; height: number };
    background: string;
    nodeCount: number;
    componentCount: number;
    styleCount: number;
  };
  structure: {
    rootFrame: FigmaNode;
    children: FigmaNode[];
    hierarchy: Record<string, string[]>;
  };
  components: {
    buttons: FigmaNode[];
    cards: FigmaNode[];
    inputs: FigmaNode[];
    navigation: FigmaNode[];
    feedback: FigmaNode[];
  };
  styles: {
    colors: any[];
    typography: any[];
    spacing: any[];
    shadows: any[];
  };
  content: {
    text: FigmaNode[];
    labels: FigmaNode[];
    data: any[];
  };
}

interface SizeAnalysis {
  originalSize: number;
  reorganizedSize: number;
  sizeReduction: number;
  sizeReductionPercent: number;
  fileCount: {
    original: number;
    reorganized: number;
  };
  folderCount: {
    original: number;
    reorganized: number;
  };
  averageFileSize: {
    original: number;
    reorganized: number;
  };
  largestFiles: Array<{
    path: string;
    size: number;
    type: 'original' | 'reorganized';
  }>;
  sizeByCategory: Record<string, {
    original: number;
    reorganized: number;
    reduction: number;
  }>;
}

interface ReorganizationResult {
  success: boolean;
  statistics: {
    originalNodes: number;
    savedNodes: number;
    dataLoss: number;
    createdFolders: number;
    createdFiles: number;
    totalSize: number;
    executionTime: number;
  };
  sizeAnalysis: SizeAnalysis;
  errors: string[];
  warnings: string[];
}

export class FigmaBatchReorganizer {
  private readonly exportPath = './export';
  private readonly reorganizedPath = './export/reorganized';
  private readonly nodesPath = './export/nodes';
  private readonly stylesPath = './export/styles';
  private readonly componentsPath = './export/components';

  private statistics = {
    originalNodes: 0,
    savedNodes: 0,
    dataLoss: 0,
    createdFolders: 0,
    createdFiles: 0,
    totalSize: 0,
    executionTime: 0
  };

  private sizeAnalysis: SizeAnalysis = {
    originalSize: 0,
    reorganizedSize: 0,
    sizeReduction: 0,
    sizeReductionPercent: 0,
    fileCount: { original: 0, reorganized: 0 },
    folderCount: { original: 0, reorganized: 0 },
    averageFileSize: { original: 0, reorganized: 0 },
    largestFiles: [],
    sizeByCategory: {}
  };

  private errors: string[] = [];
  private warnings: string[] = [];

  /**
   * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò
   */
  async reorganize(): Promise<ReorganizationResult> {
    const startTime = Date.now();
    
    try {
      console.log(`üöÄ –ù–ê–ß–ê–õ–û –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –ë–ê–¢–ß–ï–ô FIGMA`);
      console.log(`üìÖ –í—Ä–µ–º—è: ${new Date().toISOString()}`);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      if (!existsSync(this.reorganizedPath)) {
        mkdirSync(this.reorganizedPath, { recursive: true });
        console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${this.reorganizedPath}`);
      }
      
      // –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
      const analysisResult = await this.analyzeAndClassify();
      if (!analysisResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${analysisResult.error}`);
      }
      
      // –≠—Ç–∞–ø 2: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ—è–º
      const layersResult = await this.separateByLayers(analysisResult.data);
      if (!layersResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å–ª–æ—è–º: ${layersResult.error}`);
      }
      
      // –≠—Ç–∞–ø 3: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const componentsResult = await this.groupComponents(analysisResult.data);
      if (!componentsResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${componentsResult.error}`);
      }
      
      // –≠—Ç–∞–ø 4: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω–æ–≤
      const tokensResult = await this.extractDesignTokens(analysisResult.data);
      if (!tokensResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ${tokensResult.error}`);
      }
      
      // –≠—Ç–∞–ø 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
      const validationResult = await this.validateAndCheck();
      if (!validationResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationResult.error}`);
      }
      
      // –≠—Ç–∞–ø 6: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      await this.copyMissingData();
      
      // –≠—Ç–∞–ø 7: –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
      await this.analyzeSizes();
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      this.statistics.executionTime = Date.now() - startTime;
      await this.logFinalStatistics();
      
      return {
        success: true,
        statistics: this.statistics,
        sizeAnalysis: this.sizeAnalysis,
        errors: this.errors,
        warnings: this.warnings
      };
      
    } catch (error) {
      console.error(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò:`, error);
      this.errors.push(error instanceof Error ? error.message : String(error));
      
      return {
        success: false,
        statistics: this.statistics,
        sizeAnalysis: this.sizeAnalysis,
        errors: this.errors,
        warnings: this.warnings
      };
    }
  }

  /**
   * –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø
   */
  private async analyzeAndClassify(): Promise<{ success: boolean; data?: any; error?: string }> {
    try {
      console.log(`\nüîç –≠–¢–ê–ü 1: –ê–ù–ê–õ–ò–ó –ò –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø`);
      
      // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–¥ –∏–∑ —Ñ–∞–π–ª–æ–≤ nodes/
      console.log(`   üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ nodes/...`);
      const allNodes: FigmaNode[] = [];
      const allBatches: any[] = [];
      const allStyles: any[] = [];
      const allComponents: any[] = [];
      const allImages: any[] = [];
      const allMetadata: any[] = [];
      
      // –ß–∏—Ç–∞–µ–º all_nodes.json
      const allNodesPath = join(this.nodesPath, 'all_nodes.json');
      if (existsSync(allNodesPath)) {
        console.log(`   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ all_nodes.json...`);
        const allNodesData = JSON.parse(readFileSync(allNodesPath, 'utf8'));
        if (Array.isArray(allNodesData)) {
          allNodes.push(...allNodesData);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allNodesData.length} –Ω–æ–¥ –∏–∑ all_nodes.json`);
        } else if (allNodesData.nodes && Array.isArray(allNodesData.nodes)) {
          allNodes.push(...allNodesData.nodes);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allNodesData.nodes.length} –Ω–æ–¥ –∏–∑ all_nodes.json`);
        }
      }
      
      // –ß–∏—Ç–∞–µ–º frames.json
      const framesPath = join(this.nodesPath, 'frames.json');
      if (existsSync(framesPath)) {
        console.log(`   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ frames.json...`);
        const framesData = JSON.parse(readFileSync(framesPath, 'utf8'));
        if (Array.isArray(framesData)) {
          allNodes.push(...framesData);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${framesData.length} —Ñ—Ä–µ–π–º–æ–≤ –∏–∑ frames.json`);
        } else if (framesData.frames && Array.isArray(framesData.frames)) {
          allNodes.push(...framesData.frames);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${framesData.frames.length} —Ñ—Ä–µ–π–º–æ–≤ –∏–∑ frames.json`);
        }
      }
      
      // –ß–∏—Ç–∞–µ–º instances.json
      const instancesPath = join(this.nodesPath, 'instances.json');
      if (existsSync(instancesPath)) {
        console.log(`   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ instances.json...`);
        const instancesData = JSON.parse(readFileSync(instancesPath, 'utf8'));
        if (Array.isArray(instancesData)) {
          allNodes.push(...instancesData);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${instancesData.length} –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –∏–∑ instances.json`);
        } else if (instancesData.instances && Array.isArray(instancesData.instances)) {
          allNodes.push(...instancesData.instances);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${instancesData.instances.length} –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –∏–∑ instances.json`);
        }
      }
      
      // –ß–∏—Ç–∞–µ–º text_nodes.json
      const textNodesPath = join(this.nodesPath, 'text_nodes.json');
      if (existsSync(textNodesPath)) {
        console.log(`   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ text_nodes.json...`);
        const textNodesData = JSON.parse(readFileSync(textNodesPath, 'utf8'));
        if (Array.isArray(textNodesData)) {
          allNodes.push(...textNodesData);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${textNodesData.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–æ–¥ –∏–∑ text_nodes.json`);
        } else if (textNodesData.textNodes && Array.isArray(textNodesData.textNodes)) {
          allNodes.push(...textNodesData.textNodes);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${textNodesData.textNodes.length} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–æ–¥ –∏–∑ text_nodes.json`);
        }
      }
      
      // –ß–∏—Ç–∞–µ–º rectangles.json
      const rectanglesPath = join(this.nodesPath, 'rectangles.json');
      if (existsSync(rectanglesPath)) {
        console.log(`   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ rectangles.json...`);
        const rectanglesData = JSON.parse(readFileSync(rectanglesPath, 'utf8'));
        if (Array.isArray(rectanglesData)) {
          allNodes.push(...rectanglesData);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rectanglesData.length} –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏–∑ rectangles.json`);
        } else if (rectanglesData.rectangles && Array.isArray(rectanglesData.rectangles)) {
          allNodes.push(...rectanglesData.rectangles);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rectanglesData.rectangles.length} –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –∏–∑ rectangles.json`);
        }
      }
      
      // –ß–∏—Ç–∞–µ–º groups.json
      const groupsPath = join(this.nodesPath, 'groups.json');
      if (existsSync(groupsPath)) {
        console.log(`   üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ groups.json...`);
        const groupsData = JSON.parse(readFileSync(groupsPath, 'utf8'));
        if (Array.isArray(groupsData)) {
          allNodes.push(...groupsData);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${groupsData.length} –≥—Ä—É–ø–ø –∏–∑ groups.json`);
        } else if (groupsData.groups && Array.isArray(groupsData.groups)) {
          allNodes.push(...groupsData.groups);
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${groupsData.groups.length} –≥—Ä—É–ø–ø –∏–∑ groups.json`);
        }
      }
      
      this.statistics.originalNodes = allNodes.length;
      console.log(`   üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–¥: ${allNodes.length}`);
      
      // –ß—Ç–µ–Ω–∏–µ –±–∞—Ç—á–µ–π
      console.log(`   üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ batches/...`);
      const batchesPath = join(this.exportPath, 'batches');
      if (existsSync(batchesPath)) {
        const batchFiles = readdirSync(batchesPath);
        console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ –±–∞—Ç—á–µ–π: ${batchFiles.length}`);
        
        for (const fileName of batchFiles) {
          const filePath = join(batchesPath, fileName);
          try {
            const data = JSON.parse(readFileSync(filePath, 'utf8'));
            if (Array.isArray(data)) {
              allBatches.push(...data);
            }
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${fileName}: ${error}`);
          }
        }
        console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allBatches.length} –Ω–æ–¥ –∏–∑ –±–∞—Ç—á–µ–π`);
      }
      
      // –ß—Ç–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
      console.log(`   üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ styles/...`);
      if (existsSync(this.stylesPath)) {
        const styleFiles = readdirSync(this.stylesPath);
        console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–ª–µ–π: ${styleFiles.length}`);
        
        for (const fileName of styleFiles) {
          const filePath = join(this.stylesPath, fileName);
          try {
            const data = JSON.parse(readFileSync(filePath, 'utf8'));
            allStyles.push(data);
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${fileName}: ${error}`);
          }
        }
        console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allStyles.length} —Ñ–∞–π–ª–æ–≤ —Å—Ç–∏–ª–µ–π`);
      }
      
      // –ß—Ç–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      console.log(`   üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ components/...`);
      if (existsSync(this.componentsPath)) {
        const componentFiles = readdirSync(this.componentsPath);
        console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${componentFiles.length}`);
        
        for (const fileName of componentFiles) {
          const filePath = join(this.componentsPath, fileName);
          try {
            const data = JSON.parse(readFileSync(filePath, 'utf8'));
            allComponents.push(data);
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${fileName}: ${error}`);
          }
        }
        console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allComponents.length} —Ñ–∞–π–ª–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
      }
      
      // –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      console.log(`   üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ images/...`);
      const imagesPath = join(this.exportPath, 'images');
      if (existsSync(imagesPath)) {
        const imageFiles = readdirSync(imagesPath);
        console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}`);
        allImages.push(...imageFiles);
      }
      
      // –ß—Ç–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      console.log(`   üìÅ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ metadata/...`);
      const metadataPath = join(this.exportPath, 'metadata');
      if (existsSync(metadataPath)) {
        const metadataFiles = readdirSync(metadataPath);
        console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataFiles.length}`);
        
        for (const fileName of metadataFiles) {
          const filePath = join(metadataPath, fileName);
          try {
            const data = JSON.parse(readFileSync(filePath, 'utf8'));
            allMetadata.push(data);
          } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${fileName}: ${error}`);
          }
        }
        console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allMetadata.length} —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö`);
      }
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
      const uniqueNodes = this.removeDuplicates(allNodes);
      console.log(`   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–¥: ${uniqueNodes.length}`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–µ–π (–û–ë–û–ì–ê–©–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò)
      console.log(`   üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${allBatches.length} –±–∞—Ç—á–µ–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`);
      
      // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–æ–¥ –ø–æ ID
      const nodesMap = new Map(uniqueNodes.map(node => [node.id, node]));
      const batchNodeIds = new Set<string>();
      const enrichedNodes = [...uniqueNodes];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏
      for (const batchItem of allBatches) {
        if (batchItem.nodeId && batchItem.document) {
          batchNodeIds.add(batchItem.nodeId);
          
          // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –Ω–æ–¥—É –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          const existingNode = nodesMap.get(batchItem.nodeId);
          
          if (existingNode) {
            // –û–±–æ–≥–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–æ–¥—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞—Ç—á–∞
            const enrichedNode = {
              ...existingNode,
              ...batchItem.document,
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
              originalFills: existingNode.fills,
              originalStrokes: existingNode.strokes,
              // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞—Ç—á–∞
              detailedFills: batchItem.document.fills,
              detailedStrokes: batchItem.document.strokes,
              detailedChildren: batchItem.document.children,
              detailedBoundingBox: batchItem.document.absoluteBoundingBox,
              cornerRadius: batchItem.document.cornerRadius,
              // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞
              batchData: {
                nodeId: batchItem.nodeId,
                source: 'batch'
              }
            };
            
            // –ó–∞–º–µ–Ω—è–µ–º –Ω–æ–¥—É –≤ Map
            nodesMap.set(batchItem.nodeId, enrichedNode);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤–µ
            const index = enrichedNodes.findIndex(n => n.id === batchItem.nodeId);
            if (index !== -1) {
              enrichedNodes[index] = enrichedNode;
            }
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –Ω–æ–¥—É –∏–∑ –±–∞—Ç—á–∞
            const newNode = {
              ...batchItem.document,
              batchData: {
                nodeId: batchItem.nodeId,
                source: 'batch-only'
              }
            };
            enrichedNodes.push(newNode);
            nodesMap.set(batchItem.nodeId, newNode);
          }
        }
      }
      
      console.log(`   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö nodeId –≤ –±–∞—Ç—á–∞—Ö: ${batchNodeIds.size}`);
      console.log(`   üîó –û–±–æ–≥–∞—â–µ–Ω–æ –Ω–æ–¥: ${enrichedNodes.length - uniqueNodes.length}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ—Ä–µ–π–º—ã (—Å–ª–æ–∏)
      const rootFrames = enrichedNodes.filter(node => 
        node.type === 'FRAME' && !node.parentId
      );
      console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ—Ä–µ–π–º–æ–≤: ${rootFrames.length}`);
      
      return {
        success: true,
        data: {
          nodes: enrichedNodes,
          rootFrames: rootFrames,
          batches: allBatches,
          styles: allStyles,
          components: allComponents,
          images: allImages,
          metadata: allMetadata
        }
      };
      
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ ID
   */
  private removeDuplicates(nodes: FigmaNode[]): FigmaNode[] {
    const seen = new Set<string>();
    return nodes.filter(node => {
      if (seen.has(node.id)) {
        return false;
      }
      seen.add(node.id);
      return true;
    });
  }

  /**
   * –≠–¢–ê–ü 2: –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ü–û –°–õ–û–Ø–ú
   */
  private async separateByLayers(data: any): Promise<{ success: boolean; error?: string }> {
    try {
      console.log(`\nüìÇ –≠–¢–ê–ü 2: –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ü–û –°–õ–û–Ø–ú`);
      
      const { nodes, rootFrames } = data;
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É layers
      const layersPath = join(this.reorganizedPath, 'layers');
      if (!existsSync(layersPath)) {
        mkdirSync(layersPath, { recursive: true });
        this.statistics.createdFolders++;
      }
      
      for (const rootFrame of rootFrames) {
        console.log(`   üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ—è: ${rootFrame.name} (${rootFrame.id})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—è
        const layerNodes = this.getNodesForLayer(nodes, rootFrame.id);
        console.log(`      - –ù–æ–¥ –≤ —Å–ª–æ–µ: ${layerNodes.length}`);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–ª–æ—è
        const layerFolderName = `layer-${rootFrame.name.toLowerCase().replace(/\s+/g, '-')}`;
        const layerPath = join(layersPath, layerFolderName);
        if (!existsSync(layerPath)) {
          mkdirSync(layerPath, { recursive: true });
          this.statistics.createdFolders++;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—è
        const layerData = this.extractLayerData(layerNodes, rootFrame);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const structurePath = join(layerPath, 'structure.json');
        writeFileSync(structurePath, JSON.stringify(layerData.structure, null, 2));
        this.statistics.createdFiles++;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        const componentsPath = join(layerPath, 'components.json');
        writeFileSync(componentsPath, JSON.stringify(layerData.components, null, 2));
        this.statistics.createdFiles++;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª–∏
        const stylesPath = join(layerPath, 'styles.json');
        writeFileSync(stylesPath, JSON.stringify(layerData.styles, null, 2));
        this.statistics.createdFiles++;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const contentPath = join(layerPath, 'content.json');
        writeFileSync(contentPath, JSON.stringify(layerData.content, null, 2));
        this.statistics.createdFiles++;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const metadataPath = join(layerPath, 'metadata.json');
        writeFileSync(metadataPath, JSON.stringify(layerData.metadata, null, 2));
        this.statistics.createdFiles++;
        
        console.log(`      üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ 5 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–ª–æ—è ${rootFrame.name}`);
      }
      
      return { success: true };
      
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –≠–¢–ê–ü 3: –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
   */
  private async groupComponents(data: any): Promise<{ success: boolean; error?: string }> {
    try {
      console.log(`\nüîß –≠–¢–ê–ü 3: –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í`);
      
      const { nodes } = data;
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É components
      const componentsPath = join(this.reorganizedPath, 'components');
      if (!existsSync(componentsPath)) {
        mkdirSync(componentsPath, { recursive: true });
        this.statistics.createdFolders++;
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
      const groupedComponents = {
        buttons: nodes.filter((n: FigmaNode) => this.isButton(n)),
        cards: nodes.filter((n: FigmaNode) => this.isCard(n)),
        inputs: nodes.filter((n: FigmaNode) => this.isInput(n)),
        navigation: nodes.filter((n: FigmaNode) => this.isNavigation(n)),
        feedback: nodes.filter((n: FigmaNode) => this.isFeedback(n))
      };
      
      for (const [type, components] of Object.entries(groupedComponents)) {
        if (components.length > 0) {
          console.log(`   üì¶ ${type}: ${components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
          
          const typePath = join(componentsPath, type);
          if (!existsSync(typePath)) {
            mkdirSync(typePath, { recursive: true });
            this.statistics.createdFolders++;
          }
          
          const filePath = join(typePath, `${type}.json`);
          writeFileSync(filePath, JSON.stringify(components, null, 2));
          this.statistics.createdFiles++;
        }
      }
      
      return { success: true };
      
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –≠–¢–ê–ü 4: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ò–ó–ê–ô–ù-–¢–û–ö–ï–ù–û–í
   */
  private async extractDesignTokens(data: any): Promise<{ success: boolean; error?: string }> {
    try {
      console.log(`\nüé® –≠–¢–ê–ü 4: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ò–ó–ê–ô–ù-–¢–û–ö–ï–ù–û–í`);
      
      const { nodes } = data;
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É design-tokens
      const tokensPath = join(this.reorganizedPath, 'design-tokens');
      if (!existsSync(tokensPath)) {
        mkdirSync(tokensPath, { recursive: true });
        this.statistics.createdFolders++;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–∞
      const colors = this.extractUniqueColors(nodes);
      const colorsPath = join(tokensPath, 'colors.json');
      writeFileSync(colorsPath, JSON.stringify(colors, null, 2));
      this.statistics.createdFiles++;
      console.log(`   üé® –¶–≤–µ—Ç–∞: ${colors.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É
      const typography = this.extractUniqueTypography(nodes);
      const typographyPath = join(tokensPath, 'typography.json');
      writeFileSync(typographyPath, JSON.stringify(typography, null, 2));
      this.statistics.createdFiles++;
      console.log(`   üìù –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞: ${typography.length} —Å—Ç–∏–ª–µ–π`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
      const spacing = this.extractUniqueSpacing(nodes);
      const spacingPath = join(tokensPath, 'spacing.json');
      writeFileSync(spacingPath, JSON.stringify(spacing, null, 2));
      this.statistics.createdFiles++;
      console.log(`   üìè –û—Ç—Å—Ç—É–ø—ã: ${spacing.length} —Ä–∞–∑–º–µ—Ä–æ–≤`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–Ω–∏
      const shadows = this.extractUniqueShadows(nodes);
      const shadowsPath = join(tokensPath, 'shadows.json');
      writeFileSync(shadowsPath, JSON.stringify(shadows, null, 2));
      this.statistics.createdFiles++;
      console.log(`   üåü –¢–µ–Ω–∏: ${shadows.length} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤`);
      
      return { success: true };
      
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –≠–¢–ê–ü 5: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê
   */
  private async validateAndCheck(): Promise<{ success: boolean; error?: string }> {
    try {
      console.log(`\n‚úÖ –≠–¢–ê–ü 5: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ê`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      console.log(`   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:`);
      this.statistics.savedNodes = this.countSavedNodes();
      this.statistics.dataLoss = this.statistics.originalNodes - this.statistics.savedNodes;
      
      console.log(`      - –ò—Å—Ö–æ–¥–Ω—ã–µ –Ω–æ–¥—ã: ${this.statistics.originalNodes}`);
      console.log(`      - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã: ${this.statistics.savedNodes}`);
      console.log(`      - –ü–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö: ${this.statistics.dataLoss}`);
      
      if (this.statistics.dataLoss > 0) {
        this.warnings.push(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ—Ä—è ${this.statistics.dataLoss} –Ω–æ–¥`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
      console.log(`   üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤:`);
      const fileStructure = this.analyzeFileStructure();
      
      for (const [category, files] of Object.entries(fileStructure)) {
        console.log(`      - ${category}: ${files.length} —Ñ–∞–π–ª–æ–≤`);
      }
      
      return { success: true };
      
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : String(error)
      };
    }
  }

  /**
   * –≠–¢–ê–ü 6: –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –î–ê–ù–ù–´–•
   */
  private async copyMissingData(): Promise<void> {
    try {
      console.log(`\nüìã –≠–¢–ê–ü 6: –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –î–ê–ù–ù–´–•`);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–ø–æ–∫
      console.log(`   üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–ø–æ–∫...`);
      const missingFolders = [
        'annotations',
        'structure', 
        'logs'
      ];
      
      for (const folder of missingFolders) {
        const folderPath = join(this.reorganizedPath, folder);
        if (!existsSync(folderPath)) {
          mkdirSync(folderPath, { recursive: true });
          console.log(`      ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${folder}`);
        }
      }
      
      // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      console.log(`   üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`);
      const criticalFiles = [
        { src: 'export/annotations/all_annotations.json', dest: 'export/reorganized/annotations/' },
        { src: 'export/structure/document_structure.json', dest: 'export/reorganized/structure/' },
        { src: 'export/metadata/document_info.json', dest: 'export/reorganized/metadata/' },
        { src: 'export/styles/colors.json', dest: 'export/reorganized/styles/' },
        { src: 'export/styles/extracted_styles.json', dest: 'export/reorganized/styles/' }
      ];
      
      for (const file of criticalFiles) {
        if (existsSync(file.src)) {
          const fileName = file.src.split('/').pop();
          const destPath = join(file.dest, fileName);
          writeFileSync(destPath, readFileSync(file.src));
          console.log(`      ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file.src}`);
        } else {
          console.log(`      ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.src}`);
        }
      }
      
      // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      console.log(`   üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...`);
      const importantFiles = [
        { src: 'export/components/extracted_components.json', dest: 'export/reorganized/components/' },
        { src: 'export/components/local_components.json', dest: 'export/reorganized/components/' }
      ];
      
      for (const file of importantFiles) {
        if (existsSync(file.src)) {
          const fileName = file.src.split('/').pop();
          const destPath = join(file.dest, fileName);
          writeFileSync(destPath, readFileSync(file.src));
          console.log(`      ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${file.src}`);
        } else {
          console.log(`      ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.src}`);
        }
      }
      
      // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      console.log(`   üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...`);
      const imagesPath = join(this.exportPath, 'images');
      const reorganizedImagesPath = join(this.reorganizedPath, 'images');
      
      if (existsSync(imagesPath)) {
        const imageFiles = readdirSync(imagesPath);
        console.log(`      üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}`);
        
        for (const imageFile of imageFiles) {
          const srcPath = join(imagesPath, imageFile);
          const destPath = join(reorganizedImagesPath, imageFile);
          writeFileSync(destPath, readFileSync(srcPath));
          console.log(`      ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${imageFile}`);
        }
      }
      
      // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
      console.log(`   üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)...`);
      const logsPath = join(this.exportPath, 'logs');
      const reorganizedLogsPath = join(this.reorganizedPath, 'logs');
      
      if (existsSync(logsPath)) {
        const logFiles = readdirSync(logsPath);
        console.log(`      üìÅ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤: ${logFiles.length}`);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
        const filesToCopy = logFiles.slice(0, 10);
        for (const logFile of filesToCopy) {
          const srcPath = join(logsPath, logFile);
          const destPath = join(reorganizedLogsPath, logFile);
          writeFileSync(destPath, readFileSync(srcPath));
          console.log(`      ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ª–æ–≥: ${logFile}`);
        }
        console.log(`      üìä –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${filesToCopy.length} –∏–∑ ${logFiles.length} –ª–æ–≥–æ–≤`);
      }
      
      console.log(`   ‚úÖ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:`, error);
      this.errors.push(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –≠–¢–ê–ü 7: –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í
   */
  private async analyzeSizes(): Promise<void> {
    try {
      console.log(`\nüìä –≠–¢–ê–ü 7: –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í`);
      
      // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
      console.log(`   üìÅ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤...`);
      const originalAnalysis = this.analyzeDirectorySize(this.exportPath);
      this.sizeAnalysis.originalSize = originalAnalysis.totalSize;
      this.sizeAnalysis.fileCount.original = originalAnalysis.fileCount;
      this.sizeAnalysis.folderCount.original = originalAnalysis.folderCount;
      this.sizeAnalysis.averageFileSize.original = originalAnalysis.averageFileSize;
      
      console.log(`      - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(originalAnalysis.totalSize / 1024)} KB`);
      console.log(`      - –§–∞–π–ª–æ–≤: ${originalAnalysis.fileCount}`);
      console.log(`      - –ü–∞–ø–æ–∫: ${originalAnalysis.folderCount}`);
      console.log(`      - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(originalAnalysis.averageFileSize)} bytes`);
      
      // –ê–Ω–∞–ª–∏–∑ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
      console.log(`   üìÅ –ê–Ω–∞–ª–∏–∑ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤...`);
      const reorganizedAnalysis = this.analyzeDirectorySize(this.reorganizedPath);
      this.sizeAnalysis.reorganizedSize = reorganizedAnalysis.totalSize;
      this.sizeAnalysis.fileCount.reorganized = reorganizedAnalysis.fileCount;
      this.sizeAnalysis.folderCount.reorganized = reorganizedAnalysis.folderCount;
      this.sizeAnalysis.averageFileSize.reorganized = reorganizedAnalysis.averageFileSize;
      
      console.log(`      - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(reorganizedAnalysis.totalSize / 1024)} KB`);
      console.log(`      - –§–∞–π–ª–æ–≤: ${reorganizedAnalysis.fileCount}`);
      console.log(`      - –ü–∞–ø–æ–∫: ${reorganizedAnalysis.folderCount}`);
      console.log(`      - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(reorganizedAnalysis.averageFileSize)} bytes`);
      
      // –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      this.sizeAnalysis.sizeReduction = originalAnalysis.totalSize - reorganizedAnalysis.totalSize;
      this.sizeAnalysis.sizeReductionPercent = originalAnalysis.totalSize > 0 
        ? (this.sizeAnalysis.sizeReduction / originalAnalysis.totalSize) * 100 
        : 0;
      
      console.log(`   üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:`);
      console.log(`      - –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: ${Math.round(this.sizeAnalysis.sizeReduction / 1024)} KB`);
      console.log(`      - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: ${this.sizeAnalysis.sizeReductionPercent.toFixed(1)}%`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤:`, error);
      this.errors.push(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
   */
  
  private getNodesForLayer(nodes: FigmaNode[], layerId: string): FigmaNode[] {
    const layerNodes: FigmaNode[] = [];
    const processedIds = new Set<string>();
    
    const collectNodes = (nodeId: string) => {
      if (processedIds.has(nodeId)) return;
      processedIds.add(nodeId);
      
      const node = nodes.find(n => n.id === nodeId);
      if (node) {
        layerNodes.push(node);
        
        // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const children = nodes.filter(n => n.parentId === nodeId);
        children.forEach(child => collectNodes(child.id));
      }
    };
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞ —Å–ª–æ—è
    const rootNode = nodes.find(n => n.id === layerId);
    if (rootNode) {
      collectNodes(layerId);
    }
    
    return layerNodes;
  }
  
  private extractLayerData(nodes: FigmaNode[], layer: any): LayerData {
    const rootFrame = nodes.find(n => n.id === layer.id) || nodes[0];
    const children = nodes.filter(n => n.parentId === layer.id);
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    const hierarchy: Record<string, string[]> = {};
    for (const node of nodes) {
      if (node.parentId) {
        if (!hierarchy[node.parentId]) {
          hierarchy[node.parentId] = [];
        }
        hierarchy[node.parentId].push(node.id);
      }
    }
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const components = {
      buttons: nodes.filter(n => this.isButton(n)),
      cards: nodes.filter(n => this.isCard(n)),
      inputs: nodes.filter(n => this.isInput(n)),
      navigation: nodes.filter(n => this.isNavigation(n)),
      feedback: nodes.filter(n => this.isFeedback(n))
    };
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    const styles = {
      colors: this.extractUniqueColors(nodes),
      typography: this.extractUniqueTypography(nodes),
      spacing: this.extractUniqueSpacing(nodes),
      shadows: this.extractUniqueShadows(nodes)
    };
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const content = {
      text: nodes.filter(n => n.type === 'TEXT'),
      labels: nodes.filter(n => n.name.toLowerCase().includes('label')),
      data: []
    };
    
    return {
      metadata: {
        id: layer.id,
        name: layer.name,
        type: layer.type,
        dimensions: layer.absoluteBoundingBox || { width: 0, height: 0 },
        background: this.extractBackground(layer),
        nodeCount: nodes.length,
        componentCount: Object.values(components).reduce((sum, arr) => sum + arr.length, 0),
        styleCount: Object.values(styles).reduce((sum, arr) => sum + arr.length, 0)
      },
      structure: {
        rootFrame,
        children,
        hierarchy
      },
      components,
      styles,
      content
    };
  }

  // –ú–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  private isButton(node: FigmaNode): boolean {
    return node.name.toLowerCase().includes('button') || 
           node.type === 'INSTANCE' && node.name.toLowerCase().includes('btn');
  }
  
  private isCard(node: FigmaNode): boolean {
    return node.name.toLowerCase().includes('card') || 
           node.type === 'FRAME' && node.name.toLowerCase().includes('card');
  }
  
  private isInput(node: FigmaNode): boolean {
    return node.name.toLowerCase().includes('input') || 
           node.name.toLowerCase().includes('field');
  }
  
  private isNavigation(node: FigmaNode): boolean {
    return node.name.toLowerCase().includes('nav') || 
           node.name.toLowerCase().includes('menu');
  }
  
  private isFeedback(node: FigmaNode): boolean {
    return node.name.toLowerCase().includes('alert') || 
           node.name.toLowerCase().includes('notification');
  }

  // –ú–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
  private extractUniqueColors(nodes: FigmaNode[]): any[] {
    const colors = new Set<string>();
    nodes.forEach(node => {
      if (node.fills) {
        node.fills.forEach(fill => {
          if (fill.color) {
            colors.add(JSON.stringify(fill.color));
          }
        });
      }
    });
    return Array.from(colors).map(color => JSON.parse(color));
  }
  
  private extractUniqueTypography(textNodes: FigmaNode[]): any[] {
    const typography = new Set<string>();
    textNodes.forEach(node => {
      if (node.style) {
        typography.add(JSON.stringify(node.style));
      }
    });
    return Array.from(typography).map(style => JSON.parse(style));
  }
  
  private extractUniqueSpacing(nodes: FigmaNode[]): any[] {
    const spacing = new Set<number>();
    nodes.forEach(node => {
      if (node.absoluteBoundingBox) {
        spacing.add(node.absoluteBoundingBox.x);
        spacing.add(node.absoluteBoundingBox.y);
        spacing.add(node.absoluteBoundingBox.width);
        spacing.add(node.absoluteBoundingBox.height);
      }
    });
    return Array.from(spacing).sort((a, b) => a - b);
  }
  
  private extractUniqueShadows(nodes: FigmaNode[]): any[] {
    const shadows = new Set<string>();
    nodes.forEach(node => {
      if (node.strokes) {
        node.strokes.forEach(stroke => {
          shadows.add(JSON.stringify(stroke));
        });
      }
    });
    return Array.from(shadows).map(shadow => JSON.parse(shadow));
  }
  
  private extractBackground(node: any): string {
    if (node.fills && node.fills.length > 0) {
      const fill = node.fills[0];
      if (fill.color) {
        return `#${Math.round(fill.color.r * 255).toString(16).padStart(2, '0')}${Math.round(fill.color.g * 255).toString(16).padStart(2, '0')}${Math.round(fill.color.b * 255).toString(16).padStart(2, '0')}`;
      }
    }
    return '#ffffff';
  }

  // –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
  private countSavedNodes(): number {
    let count = 0;
    try {
      const layersPath = join(this.reorganizedPath, 'layers');
      if (existsSync(layersPath)) {
        const layerFolders = readdirSync(layersPath, { withFileTypes: true })
          .filter(dirent => dirent.isDirectory())
          .map(dirent => dirent.name);
        
        for (const layerFolder of layerFolders) {
          const layerPath = join(layersPath, layerFolder);
          const componentsPath = join(layerPath, 'components.json');
          
          if (existsSync(componentsPath)) {
            const componentsData = JSON.parse(readFileSync(componentsPath, 'utf8'));
            count += (componentsData.buttons?.length || 0);
            count += (componentsData.cards?.length || 0);
            count += (componentsData.inputs?.length || 0);
            count += (componentsData.navigation?.length || 0);
            count += (componentsData.feedback?.length || 0);
          }
        }
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–¥—ã:', error);
    }
    return count;
  }
  
  private analyzeFileStructure(): Record<string, string[]> {
    const structure: Record<string, string[]> = {};
    try {
      const files = readdirSync(this.reorganizedPath, { recursive: true });
      for (const file of files) {
        if (typeof file === 'string' && file.endsWith('.json')) {
          const category = file.split('/')[0];
          if (!structure[category]) {
            structure[category] = [];
          }
          structure[category].push(file);
        }
      }
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤');
    }
    return structure;
  }
  
  private analyzeDirectorySize(dirPath: string): {
    totalSize: number;
    fileCount: number;
    folderCount: number;
    averageFileSize: number;
  } {
    let totalSize = 0;
    let fileCount = 0;
    let folderCount = 0;
    
    try {
      const analyzeRecursive = (currentPath: string) => {
        if (!existsSync(currentPath)) return;
        
        const items = readdirSync(currentPath, { withFileTypes: true });
        
        for (const item of items) {
          const fullPath = join(currentPath, item.name);
          
          if (item.isDirectory()) {
            folderCount++;
            analyzeRecursive(fullPath);
          } else if (item.isFile()) {
            try {
              const stats = statSync(fullPath);
              totalSize += stats.size;
              fileCount++;
            } catch (error) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
            }
          }
        }
      };
      
      analyzeRecursive(dirPath);
      
    } catch (error) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}:`, error);
    }
    
    return {
      totalSize,
      fileCount,
      folderCount,
      averageFileSize: fileCount > 0 ? totalSize / fileCount : 0
    };
  }

  private async logFinalStatistics(): Promise<void> {
    console.log(`\n‚úÖ –†–ï–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê`);
    console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   üìÅ –°–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫: ${this.statistics.createdFolders}`);
    console.log(`   üìÑ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.statistics.createdFiles}`);
    console.log(`   üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(this.statistics.totalSize / 1024)} KB`);
    console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${this.statistics.executionTime}ms`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    console.log(`\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ó–ú–ï–†–û–í:`);
    console.log(`   üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(this.sizeAnalysis.originalSize / 1024)} KB`);
    console.log(`   üì¶ –†–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(this.sizeAnalysis.reorganizedSize / 1024)} KB`);
    console.log(`   üìâ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: ${Math.round(this.sizeAnalysis.sizeReduction / 1024)} KB (${this.sizeAnalysis.sizeReductionPercent.toFixed(1)}%)`);
    console.log(`   üìÅ –§–∞–π–ª–æ–≤: ${this.sizeAnalysis.fileCount.original} ‚Üí ${this.sizeAnalysis.fileCount.reorganized}`);
    console.log(`   üìÇ –ü–∞–ø–æ–∫: ${this.sizeAnalysis.folderCount.original} ‚Üí ${this.sizeAnalysis.folderCount.reorganized}`);
    console.log(`   üìè –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(this.sizeAnalysis.averageFileSize.original)} ‚Üí ${Math.round(this.sizeAnalysis.averageFileSize.reorganized)} bytes`);
    
    if (this.errors.length > 0) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${this.errors.length}`);
      this.errors.forEach(error => console.log(`      - ${error}`));
    }
    
    if (this.warnings.length > 0) {
      console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.warnings.length}`);
      this.warnings.forEach(warning => console.log(`      - ${warning}`));
    }
  }
}
